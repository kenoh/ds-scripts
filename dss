#!/usr/bin/python3
import click
import shlex
import shutil
import subprocess as sp
import sys
import os


@click.group()
def cli():
    pass


def call(cmd, *args, **kwargs):
    print(79*'#')
    print(f'# Calling: {" ".join(map(shlex.quote, cmd))}')
    try:
        print(f'#      at: {kwargs["cwd"]}')
    except IndexError:
        print(f'#      at: {os.getcwd()}')
    print(79*'#')
    return sp.check_call(cmd, stdout=sys.stdout, stderr=sys.stderr, *args, **kwargs)


def call_at_base(cmd, *args, **kwargs):
    return call(cmd, cwd=get_repo_base(), *args, **kwargs)


def bash(cmd, *args, **kwargs):
    return call(['bash', '-c', cmd], *args, **kwargs)


def bash_at_base(cmd, *args, **kwargs):
    return bash(cmd, cwd=get_repo_base(), *args, **kwargs)


def get_repo_base():
    return sp.check_output(['git', 'rev-parse', '--show-toplevel']).decode().strip()


@cli.command('builddeps')
def cli_builddeps():
    cmd = r"""
	grep -E "^(Build)?Requires" rpm/389-ds-base.spec.in \
		  | grep -v -E '(name|MODULE)' \
		  | awk '{ print $2 }' \
		  | sed 's/%{python3_pkgversion}/3/g' \
		  | grep -v "^/" \
		  | grep -v pkgversion \
		  | sort | uniq \
		  | tr '\n' ' ' \
		| xargs sudo dnf -y install --setopt=strict=False
"""
    return bash_at_base(cmd)


@cli.command('srpms')
@click.option('-r', '--rust', is_flag=True, default=False, help='Pre-download Rust dependencies')
@click.option('-a', '--skip-audit', is_flag=True, default=False, help='Skip NPM audit')
def cli_srpms(rust, skip_audit):
    return srpms(rust, skip_audit)


def srpms(rust, skip_audit):
    bash_at_base('make -f rpm.mk clean')
    if rust:
        bash_at_base('make -f rpm.mk download-cargo-dependencies')
    bash_at_base(f'{"SKIP_AUDIT_CI=1 " if skip_audit else ""}make -f rpm.mk srpms')


@cli.command('rpms')
@click.option('-r', '--rust', is_flag=True, default=False, help='Pre-download Rust dependencies')
@click.option('-u', '--ugly', is_flag=True, default=False, help='Be ugly, i.e. do not build with `nice 19`')
@click.option('-a', '--skip-audit', is_flag=True, default=False, help='Skip NPM audit')
def cli_rpms(rust, ugly, skip_audit):
    srpms(rust, skip_audit)

    timestamp = sp.check_output(['date', '--utc', '+%Y%m%d_%H%M%SZ']).decode().strip()
    bash_at_base(f'mv ~/rpmbuild/RPMS{{,~{timestamp}}} || true')
    bash_at_base(('' if ugly else 'nice -n 19 ') + 'rpmbuild --nocheck --rebuild dist/srpms/*')

    reinstall_from(os.path.expanduser('~/rpmbuild/RPMS'))


@cli.command('reinstall-from')
@click.argument('directory', default=os.path.expanduser('~/rpmbuild/RPMS'))
def cli_reinstall_from(directory):
    return reinstall_from(directory)


def reinstall_from(directory):
    call(['sudo', 'dnf', '-y', 'remove', '389-ds-base*', 'python3-lib389', 'python3-389-ds-base-tests'], cwd=directory)
    bash('sudo dnf -y install */*.rpm', cwd=directory)


@cli.command('test')
@click.option('-d', '--debugging', is_flag=True, default=False)
@click.option('-g', '--global-lib389', is_flag=True, default=False)
@click.argument('args', nargs=-1)
def cli_test(args, debugging, global_lib389):
    return call(['sudo'
                ,'PYTHONDONTWRITEBYTECODE=1'
                ,*([f'PYTHONPATH={get_repo_base()}/src/lib389'] if not global_lib389 else [])
                ,*(['DEBUGGING=1'] if debugging else [])
                ,*[(shutil.which('pytest') or 'pytest-3')]
                , *args
                ]
               ,cwd=os.getcwd()
               #,cwd=os.path.join(get_repo_base(), 'dirsrvtests/tests')
               )



@cli.command('debug-spec')
def cli_debug_spec():
    spec = 'rpm/389-ds-base.spec.in'
    call_at_base(['sed', '-i', '/^autoreconf/i export CFLAGS="$CFLAGS -O0"', spec])


if __name__ == '__main__':
    cli()
